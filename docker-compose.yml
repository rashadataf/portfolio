services:
  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ${POSTGRES_VOLUME}

  dev:
    profiles: [ dev ]
    build:
      args:
        - WORKDIR_PATH=${WORKDIR_PATH}
      context: ${APP_CONTEXT}
      target: ${DEV_TARGET}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    container_name: ${DEV_CONTAINER_NAME}
    volumes:
      - ${DEV_VOLUME}
      - ${NODEMODULES_DEV_VOLUME}
      - ${NEXT_VOLUME}
    environment:
      NODE_ENV: ${DEV_NODE_ENV}
      PORT: ${APP_PORT}
      DATABASE_URL: ${DATABASE_URL}
      AUTH_SECRET: ${AUTH_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      AUTH_BASE_PATH: ${AUTH_BASE_PATH}
    depends_on:
      postgres:
        condition: service_healthy
        restart: true

  production:
    profiles: [ production ]
    build:
      args:
        - WORKDIR_PATH=${WORKDIR_PATH}
      context: ${APP_CONTEXT}
      target: ${PROD_TARGET}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    container_name: ${PROD_CONTAINER_NAME}
    environment:
      NODE_ENV: ${PROD_NODE_ENV}
      PORT: ${APP_PORT}
      DATABASE_URL: ${DATABASE_URL}
      AUTH_SECRET: ${AUTH_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      AUTH_TRUST_HOST: ${AUTH_TRUST_HOST}
      AUTH_BASE_PATH: ${AUTH_BASE_PATH}
      AUTH_URL: "${AUTH_URL}"
    depends_on:
      postgres:
        condition: service_healthy
        restart: true

  nginx_dev:
    profiles: [ dev ]
    build:
      context: ${NGINX_CONTEXT}
    container_name: nginx_dev
    ports:
      - "${HTTP_PORT}"
      - "${HTTPS_PORT}"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - EMAIL_ADDRESS=${EMAIL_ADDRESS}
      - PORT=${APP_PORT}
      - NODE_ENV=development
      - CHALLENGE_DIR=${CHALLENGE_DIR}
      - WITH_CERTBOT=${WITH_CERTBOT}
      - RESET_CONFIG=${RESET_CONFIG}
    volumes:
      - ${NGINX_LOG_VOLUME}
      - ${NGINX_INCLUDES_VOLUME}
      - ${NGINX_CONF_VOLUME}
      - ${CERTS_VOLUME}
      - ${DATA_VOLUME}
      - ${NGINX_TEMPLATES_VOLUME}
    depends_on:
      - dev

  nginx_production:
    profiles: [ production ]
    build:
      context: ${NGINX_CONTEXT}
    container_name: nginx_production
    ports:
      - "${HTTP_PORT}"
      - "${HTTPS_PORT}"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - EMAIL_ADDRESS=${EMAIL_ADDRESS}
      - PORT=${APP_PORT}
      - NODE_ENV=production
      - CHALLENGE_DIR=${CHALLENGE_DIR}
      - WITH_CERTBOT=${WITH_CERTBOT}
      - RESET_CONFIG=${RESET_CONFIG}
    volumes:
      - ${NGINX_LOG_VOLUME}
      - ${NGINX_INCLUDES_VOLUME}
      - ${NGINX_CONF_VOLUME}
      - ${CERTS_VOLUME}
      - ${DATA_VOLUME}
      - ${NGINX_TEMPLATES_VOLUME}
    depends_on:
      - production

volumes:
  postgres_data:
    external: true
    name: ${POSTGRES_VOLUME}
