services:
  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ${POSTGRES_VOLUME}
    networks:
      - monitoring

  dev:
    profiles: [ dev ]
    build:
      args:
        - WORKDIR_PATH=${WORKDIR_PATH}
      context: ${APP_CONTEXT}
      target: ${DEV_TARGET}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    container_name: ${DEV_CONTAINER_NAME}
    volumes:
      - ${DEV_VOLUME}
      - ${NODEMODULES_DEV_VOLUME}
      - ${NEXT_VOLUME}
    environment:
      NODE_ENV: ${DEV_NODE_ENV}
      PORT: ${APP_PORT}
      DATABASE_URL: ${DATABASE_URL}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      AUTH_SECRET: ${AUTH_SECRET}
      AUTH_TRUST_HOST: ${AUTH_TRUST_HOST}
      AUTH_BASE_PATH: ${AUTH_BASE_PATH}
      AUTH_URL: ${AUTH_URL}
      OTEL_COLLECTOR_ENDPOINT: ${OTEL_COLLECTOR_ENDPOINT}
      OTEL_COLLECTOR_EXPORT_INTERVAL: ${OTEL_COLLECTOR_EXPORT_INTERVAL}
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME}
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      otel-collector:
        condition: service_started
        restart: true
    networks:
      - monitoring

  production:
    profiles: [ production ]
    build:
      args:
        - WORKDIR_PATH=${WORKDIR_PATH}
      context: ${APP_CONTEXT}
      target: ${PROD_TARGET}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    container_name: ${PROD_CONTAINER_NAME}
    volumes:
      - ${PRODUCTION_VOLUME}
    environment:
      NODE_ENV: ${PROD_NODE_ENV}
      PORT: ${APP_PORT}
      DATABASE_URL: ${DATABASE_URL}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      AUTH_SECRET: ${AUTH_SECRET}
      AUTH_TRUST_HOST: ${AUTH_TRUST_HOST}
      AUTH_BASE_PATH: ${AUTH_BASE_PATH}
      AUTH_URL: ${AUTH_URL}
      OTEL_COLLECTOR_ENDPOINT: ${OTEL_COLLECTOR_ENDPOINT}
      OTEL_COLLECTOR_EXPORT_INTERVAL: ${OTEL_COLLECTOR_EXPORT_INTERVAL}
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME}
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      otel-collector:
        condition: service_started
        restart: true
    networks:
      - monitoring

  nginx_dev:
    profiles: [ dev ]
    build:
      context: ${NGINX_CONTEXT}
    container_name: nginx_dev
    ports:
      - "${HTTP_PORT}"
      - "${HTTPS_PORT}"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - EMAIL_ADDRESS=${EMAIL_ADDRESS}
      - PORT=${APP_PORT}
      - GRAFANA_PORT=${GRAFANA_PORT}
      - NODE_ENV=development
      - CHALLENGE_DIR=${CHALLENGE_DIR}
      - WITH_CERTBOT=${WITH_CERTBOT}
      - RESET_CONFIG=${RESET_CONFIG}
    volumes:
      - ${NGINX_LOG_VOLUME}
      - ${NGINX_INCLUDES_VOLUME}
      - ${NGINX_CONF_VOLUME}
      - ${CERTS_VOLUME}
      - ${DATA_VOLUME}
      - ${NGINX_TEMPLATES_VOLUME}
    depends_on:
      - dev
      - grafana
    networks:
      - monitoring

  nginx_production:
    profiles: [ production ]
    build:
      context: ${NGINX_CONTEXT}
    container_name: nginx_production
    ports:
      - "${HTTP_PORT}"
      - "${HTTPS_PORT}"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - EMAIL_ADDRESS=${EMAIL_ADDRESS}
      - PORT=${APP_PORT}
      - GRAFANA_PORT=${GRAFANA_PORT}
      - NODE_ENV=production
      - CHALLENGE_DIR=${CHALLENGE_DIR}
      - WITH_CERTBOT=${WITH_CERTBOT}
      - RESET_CONFIG=${RESET_CONFIG}
    volumes:
      - ${NGINX_LOG_VOLUME}
      - ${NGINX_INCLUDES_VOLUME}
      - ${NGINX_CONF_VOLUME}
      - ${CERTS_VOLUME}
      - ${DATA_VOLUME}
      - ${NGINX_TEMPLATES_VOLUME}
    depends_on:
      - production
      - grafana
    networks:
      - monitoring

  otel-collector:
    image: ${OTEL_COLLECTOR_IMG}
    container_name: ${OTEL_COLLECTOR_CONTAINER_NAME}
    restart: always
    command: ["--config=/etc/otel-collector-config.yml", "${OTEL_COLLECTOR_ARGS}"]
    volumes:
      - ${OTEL_COLLECTOR_VOLUME}
    ports:
      - "${OTEL_PPROF_PORT}:${OTEL_PPROF_PORT}"
      - "${OTEL_INTERNAL_METRICS_PORT}:${OTEL_INTERNAL_METRICS_PORT}"
      - "${OTEL_PROMETHEUS_EXPORTER_PORT}:${OTEL_PROMETHEUS_EXPORTER_PORT}"
      - "${OTEL_HEALTHCHECK_PORT}:${OTEL_HEALTHCHECK_PORT}"
      - "${OTEL_GRPC_PORT}:${OTEL_GRPC_PORT}"
      - "${OTEL_HTTP_PORT}:${OTEL_HTTP_PORT}"
      - "${OTEL_ZPAGES_PORT}:${OTEL_ZPAGES_PORT}"
    environment:
      - OTEL_PPROF_PORT=${OTEL_PPROF_PORT}
      - OTEL_ZPAGES_PORT=${OTEL_ZPAGES_PORT}
      - OTEL_PROMETHEUS_EXPORTER_ENDPOINT=${OTEL_PROMETHEUS_EXPORTER_ENDPOINT}
      - OTEL_CONST_LABEL=${OTEL_CONST_LABEL}
    networks:
      - monitoring

  prometheus:
    image: ${PROMETHEUS_IMG}
    container_name: ${PROMETHEUS_CONTAINER_NAME}
    volumes:
      - ${PROMETHEUS_CONFIG_VOLUME}
      - ${PROMETHEUS_VOLUME}
    depends_on:
      - otel-collector
    networks:
      - monitoring

  grafana:
    image: ${GRAFANA_IMG}
    container_name: ${GRAFANA_CONTAINER_NAME}
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_INTERNAL_PORT}"
    volumes:
      - ${GRAFANA_VOLUME}
    environment:
      - GF_SERVER_ROOT_URL=${GRAFANA_SERVER_ROOT_URL}
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_DOMAIN=${DOMAIN_NAME}
      - GF_SERVER_HTTP_PORT=${GRAFANA_PORT}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
    depends_on:
      - prometheus
    networks:
      - monitoring

networks:
  monitoring:

volumes:
  postgres_data:
    external: true
    name: ${POSTGRES_VOLUME}
  grafana-data:
    driver: local
  prometheus_data:
    external: true
    name: ${PROMETHEUS_VOLUME}